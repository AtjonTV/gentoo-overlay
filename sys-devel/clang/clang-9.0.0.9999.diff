--- /usr/portage/sys-devel/clang/clang-9.0.0.9999.ebuild	2019-08-13 12:56:04.962935793 +0200
+++ /portage-localrepo/sys-devel/clang/clang-9.0.0.9999.ebuild	2019-08-13 18:24:36.523241726 +0200
@@ -101,6 +101,18 @@
 }
 
 multilib_src_configure() {
+    echo "USING CUSTOM PATCHED VERSION"
+
+    if [[ "${CHOST}" == *"x86_64"* ]]; then
+        export CHOST=x86_64-pc-linux
+        TARGET_TRIPLET=x86_64-pc-linux
+    else
+        export CHOST=i686-pc-linux
+        TARGET_TRIPLET=i686-pc-linux
+    fi
+
+    echo ">>> target triplet: ${TARGET_TRIPLET}"
+
 	local llvm_version=$(llvm-config --version) || die
 	local clang_version=$(ver_cut 1-3 "${llvm_version}")
 
@@ -128,6 +140,11 @@
 		# override default stdlib and rtlib
 		-DCLANG_DEFAULT_CXX_STDLIB=$(usex default-libcxx libc++ "")
 		-DCLANG_DEFAULT_RTLIB=$(usex default-compiler-rt compiler-rt "")
+		-DCLANG_DEFAULT_UNWINDLIB=libunwind
+		-DCLANG_DEFAULT_OBJCOPY=llvm-objcopy
+		-DCLANG_DEFAULT_LINKER=ld.lld
+		-DCLANG_DEFAULT_STD_C=c17
+		-DCLANG_DEFAULT_STD_CXX=cxx17
 
 		-DCLANG_ENABLE_ARCMT=$(usex static-analyzer)
 		-DCLANG_ENABLE_STATIC_ANALYZER=$(usex static-analyzer)
@@ -157,27 +174,24 @@
 		)
 	fi
 
-	if [[ -n ${EPREFIX} ]]; then
-		mycmakeargs+=(
-			-DGCC_INSTALL_PREFIX="${EPREFIX}/usr"
-		)
-	fi
-
-	if tc-is-cross-compiler; then
-		[[ -x "/usr/bin/clang-tblgen" ]] \
-			|| die "/usr/bin/clang-tblgen not found or usable"
-		mycmakeargs+=(
-			-DCMAKE_CROSSCOMPILING=ON
-			-DCLANG_TABLEGEN=/usr/bin/clang-tblgen
-		)
-	fi
-
 	# LLVM_ENABLE_ASSERTIONS=NO does not guarantee this for us, #614844
 	use debug || local -x CPPFLAGS="${CPPFLAGS} -DNDEBUG"
 	cmake-utils_src_configure
 }
 
 multilib_src_compile() {
+    if [[ "${CHOST}" == *"x86_64"* ]]; then
+        export CHOST=x86_64-pc-linux
+        TARGET_TRIPLET=x86_64-pc-linux
+    else
+        export CHOST=i686-pc-linux
+        TARGET_TRIPLET=i686-pc-linux
+    fi
+
+    echo ">>> target triplet: ${TARGET_TRIPLET}"
+
+    export PATH="/var/tmp/portage/sys-devel/clang-${PV}/work/x/y/clang-${PV}-abi_x86_64.amd64/bin:$PATH"
+
 	cmake-utils_src_compile
 
 	# provide a symlink for tests
@@ -195,6 +209,16 @@
 }
 
 src_install() {
+    if [[ "${CHOST}" == *"x86_64"* ]]; then
+        export CHOST=x86_64-pc-linux
+        TARGET_TRIPLET=x86_64-pc-linux
+    else
+        export CHOST=i686-pc-linux
+        TARGET_TRIPLET=i686-pc-linux
+    fi
+
+    echo ">>> target triplet: ${TARGET_TRIPLET}"
+
 	MULTILIB_WRAPPED_HEADERS=(
 		/usr/include/clang/Config/config.h
 	)
@@ -247,6 +271,16 @@
 }
 
 multilib_src_install() {
+    if [[ "${CHOST}" == *"x86_64"* ]]; then
+        export CHOST=x86_64-pc-linux
+        TARGET_TRIPLET=x86_64-pc-linux
+    else
+        export CHOST=i686-pc-linux
+        TARGET_TRIPLET=i686-pc-linux
+    fi
+
+    echo ">>> target triplet: ${TARGET_TRIPLET}"
+
 	cmake-utils_src_install
 
 	# move headers to /usr/include for wrapping & ABI mismatch checks
@@ -257,6 +291,16 @@
 }
 
 multilib_src_install_all() {
+    if [[ "${CHOST}" == *"x86_64"* ]]; then
+        export CHOST=x86_64-pc-linux
+        TARGET_TRIPLET=x86_64-pc-linux
+    else
+        export CHOST=i686-pc-linux
+        TARGET_TRIPLET=i686-pc-linux
+    fi
+
+    echo ">>> target triplet: ${TARGET_TRIPLET}"
+
 	python_fix_shebang "${ED}"
 	if use static-analyzer; then
 		python_optimize "${ED}"/usr/lib/llvm/${SLOT}/share/scan-view
